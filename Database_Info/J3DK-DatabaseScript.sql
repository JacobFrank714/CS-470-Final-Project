-- MySQL Script generated by MySQL Workbench
-- Sun May  1 20:08:28 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema J3DK
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema J3DK
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `J3DK` DEFAULT CHARACTER SET utf8 ;
USE `J3DK` ;

-- -----------------------------------------------------
-- Table `J3DK`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `J3DK`.`User` (
  `User_ID` VARCHAR(12) NOT NULL,
  `Password` VARCHAR(45) NOT NULL,
  `EMail` VARCHAR(55) NOT NULL,
  `Is_Artist` TINYINT NOT NULL,
  `First_Name` VARCHAR(45) NOT NULL,
  `Last_Name` VARCHAR(45) NOT NULL,
  `Full_Name` VARCHAR(45) GENERATED ALWAYS AS (concat(First_Name + ' ' + Last_Name)) VIRTUAL,
  PRIMARY KEY (`User_ID`, `Password`),
  UNIQUE INDEX `UserID_UNIQUE` (`User_ID` ASC) VISIBLE,
  UNIQUE INDEX `EMail_UNIQUE` (`EMail` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `J3DK`.`Artist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `J3DK`.`Artist` (
  `Artist_Name` VARCHAR(20) NOT NULL,
  `Discription` MULTILINESTRING NULL,
  `Month_listeners` INT ZEROFILL NULL,
  `Verified` TINYINT ZEROFILL NULL,
  `Followers` INT ZEROFILL NULL,
  `User_ID` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Artist_Name`),
  UNIQUE INDEX `Artist_Name_UNIQUE` (`Artist_Name` ASC) VISIBLE,
  INDEX `User_idx` (`User_ID` ASC) VISIBLE,
  CONSTRAINT `User`
    FOREIGN KEY (`User_ID`)
    REFERENCES `J3DK`.`User` (`User_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `J3DK`.`Playlist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `J3DK`.`Playlist` (
  `Playlist_Name` VARCHAR(45) NOT NULL,
  `Creater` VARCHAR(45) NOT NULL,
  `Playlist_Len` TIME NULL,
  `Num_Songs` SMALLINT NULL,
  INDEX `Creater_idx` (`Creater` ASC) VISIBLE,
  PRIMARY KEY (`Playlist_Name`, `Creater`),
  CONSTRAINT `Creater`
    FOREIGN KEY (`Creater`)
    REFERENCES `J3DK`.`User` (`User_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `J3DK`.`Genres`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `J3DK`.`Genres` (
  `Genre_Name` VARCHAR(45) NOT NULL,
  `Description` MULTILINESTRING NOT NULL,
  UNIQUE INDEX `Genre_Name_UNIQUE` (`Genre_Name` ASC) VISIBLE,
  PRIMARY KEY (`Genre_Name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `J3DK`.`Songs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `J3DK`.`Songs` (
  `Song_Name` VARCHAR(45) NOT NULL,
  `Artist` VARCHAR(45) NOT NULL,
  `Song_Len` TIME NOT NULL,
  `Genre` VARCHAR(45) NOT NULL,
  `Num_Plays` INT ZEROFILL NULL,
  PRIMARY KEY (`Song_Name`, `Artist`),
  INDEX `Asrtist_idx` (`Artist` ASC) VISIBLE,
  INDEX `Genre_idx` (`Genre` ASC) VISIBLE,
  CONSTRAINT `Artist`
    FOREIGN KEY (`Artist`)
    REFERENCES `J3DK`.`Artist` (`Artist_Name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Genre`
    FOREIGN KEY (`Genre`)
    REFERENCES `J3DK`.`Genres` (`Genre_Name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `J3DK`.`Albums`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `J3DK`.`Albums` (
  `Album_Name` VARCHAR(45) NOT NULL,
  `Artist` VARCHAR(45) NOT NULL,
  `Release_Date` DATETIME NOT NULL,
  `Num_Songs` INT NOT NULL,
  `Album_len` TIME NULL,
  `Album_Cover` BLOB NULL,
  `Discription` MULTILINESTRING NULL,
  PRIMARY KEY (`Album_Name`, `Artist`),
  INDEX `Creater_idx` (`Artist` ASC) VISIBLE,
  CONSTRAINT `Album_Creater`
    FOREIGN KEY (`Artist`)
    REFERENCES `J3DK`.`Artist` (`Artist_Name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `J3DK`.`Concerts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `J3DK`.`Concerts` (
  `Concert_ID` INT NOT NULL AUTO_INCREMENT,
  `Host` VARCHAR(45) NOT NULL,
  `Location` VARCHAR(60) NOT NULL,
  `Date` DATE NOT NULL,
  `Time` TIME NOT NULL,
  `Venue_Size` INT NOT NULL,
  `Tickets_Available` INT NOT NULL,
  `Tickets_Sold` INT ZEROFILL NOT NULL,
  PRIMARY KEY (`Concert_ID`),
  INDEX `Host_idx` (`Host` ASC) VISIBLE,
  CONSTRAINT `Host`
    FOREIGN KEY (`Host`)
    REFERENCES `J3DK`.`Artist` (`Artist_Name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `J3DK`.`Playlist_Songs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `J3DK`.`Playlist_Songs` (
  `Song_Name` VARCHAR(45) NOT NULL,
  `Playlist_Name` VARCHAR(45) NOT NULL,
  INDEX `Song_ID_idx` (`Song_Name` ASC) VISIBLE,
  UNIQUE INDEX `Song_Name_UNIQUE` (`Song_Name` ASC) VISIBLE,
  PRIMARY KEY (`Song_Name`, `Playlist_Name`),
  INDEX `Playlist_Name_idx` (`Playlist_Name` ASC) VISIBLE,
  CONSTRAINT `Song_ID`
    FOREIGN KEY (`Song_Name`)
    REFERENCES `J3DK`.`Songs` (`Song_Name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Playlist_Name`
    FOREIGN KEY (`Playlist_Name`)
    REFERENCES `J3DK`.`Playlist` (`Playlist_Name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `J3DK`.`Album_Songs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `J3DK`.`Album_Songs` (
  `Album_Name` VARCHAR(45) NOT NULL,
  `Song_Name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Album_Name`, `Song_Name`),
  INDEX `Song_idx` (`Song_Name` ASC) VISIBLE,
  CONSTRAINT `Album`
    FOREIGN KEY (`Album_Name`)
    REFERENCES `J3DK`.`Albums` (`Album_Name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Song`
    FOREIGN KEY (`Song_Name`)
    REFERENCES `J3DK`.`Songs` (`Song_Name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `J3DK`.`Friends`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `J3DK`.`Friends` (
  `Host` VARCHAR(45) NOT NULL,
  `Friend` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Host`, `Friend`),
  INDEX `Friend_idx` (`Friend` ASC) VISIBLE,
  CONSTRAINT `Host_friend`
    FOREIGN KEY (`Host`)
    REFERENCES `J3DK`.`User` (`User_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Friend`
    FOREIGN KEY (`Friend`)
    REFERENCES `J3DK`.`User` (`User_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `J3DK`.`Following`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `J3DK`.`Following` (
  `Host` VARCHAR(45) NOT NULL,
  `Artist` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Host`, `Artist`),
  INDEX `Artist_idx` (`Artist` ASC) VISIBLE,
  CONSTRAINT `User_Name`
    FOREIGN KEY (`Host`)
    REFERENCES `J3DK`.`User` (`User_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Artist_Name`
    FOREIGN KEY (`Artist`)
    REFERENCES `J3DK`.`Artist` (`Artist_Name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `J3DK` ;

-- -----------------------------------------------------
-- procedure Playlist_Creation
-- -----------------------------------------------------

DELIMITER $$
USE `J3DK`$$
CREATE PROCEDURE `Playlist_Creation` (Name varchar(45), User_ID varchar(12))
BEGIN
INSERT INTO `Playlist` (Playlist_Name, Creator)
VALUES (Name, User_ID);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Artist_Creation
-- -----------------------------------------------------

DELIMITER $$
USE `J3DK`$$
CREATE PROCEDURE `Artist_Creation` (Name VARCHAR(45), Description multilinestring, ID varchar(12))
BEGIN
insert into `Artist` (Artist_Name,Discription,User_ID)
values (Name, Description, ID);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure User_Creation
-- -----------------------------------------------------

DELIMITER $$
USE `J3DK`$$
CREATE PROCEDURE `User_Creation` (User_ID varchar(12), Email varchar(55), Password varchar(45), Is_Artist tinyint, First_Name varchar(45), Last_Name varchar(45))
BEGIN
INSERT INTO `User` (User_ID, EMail, Password, Is_Artist, First_Name, Last_Name)
VALUES (User_ID, Email, Password, Is_Artist, First_Name, Last_Name);
CALL Playlist_Creation ('Liked_Songs',User_ID);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Song_Creation
-- -----------------------------------------------------

DELIMITER $$
USE `J3DK`$$
CREATE PROCEDURE `Song_Creation` (Song_Name varchar(45), Genre varchar(45), Artist varchar(45), Album_Name varchar(45))
BEGIN
insert into `Songs` (Song_Name,Genre,Artist)
values (Name, Genre, Arist);
insert into `Album_Songs` (Song_Name,Album_Name)
values(Song_Name,Album_Name);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Album_Creation
-- -----------------------------------------------------

DELIMITER $$
USE `J3DK`$$
CREATE PROCEDURE `Album_Creation` (Name varchar(45), Artist varchar(45), Album_Cover blob, Description multilinestring)
BEGIN
INSERT INTO `Albums` (Album_Name,Artistm,Num_songs,Album_Cover,Discription)
VALUES(Name, Artist, Num_Songs, Album_Cover, Description);
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Add_Song_to_Playlist
-- -----------------------------------------------------

DELIMITER $$
USE `J3DK`$$
CREATE PROCEDURE `Add_Song_to_Playlist` (song varchar(45),playlist varchar(45), artist varchar(45))
BEGIN
insert into `Playlist_Songs` (Song_Name,Playlist_Name)
values (song,playlist);

select Song_Len from `Songs` as song_len where Song_Name = song and Artist = artist;

update `Playlist`
set Playlist_Len = Playlist_Len + song_Len
where Playlist_Name = playlist;

update `Playlist`
set Num_Songs = Num_Songs + 1
where Playlist_Name = playlist;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Add_Song_to_Album
-- -----------------------------------------------------

DELIMITER $$
USE `J3DK`$$
CREATE PROCEDURE `Add_Song_to_Album` (Album_name varchar(45),Song_name varchar(45))
BEGIN
insert into `Album_Songs` (Album_Name, Song_Name)
values (Album_name, Song_name);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Create_Concert
-- -----------------------------------------------------

DELIMITER $$
USE `J3DK`$$
CREATE PROCEDURE `Create_Concert` (Host varchar(45), Location varchar(45), Date date, Time time, Venue_Size int)
BEGIN
insert into `Concerts` (Host, Location, Date, Time, Venue_Size, Tickets_Available)
values (Host, Location, Date, Time, Venue_Size, Venue_Size);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Add_Friend
-- -----------------------------------------------------

DELIMITER $$
USE `J3DK`$$
CREATE PROCEDURE `Add_Friend` (Host varchar(45), Friend varchar(45))
BEGIN
insert into `Friends` (Host, Friend)
values(Host, Friend);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Follow_Artist
-- -----------------------------------------------------

DELIMITER $$
USE `J3DK`$$
CREATE PROCEDURE `Follow_Artist` (Artist varchar(45), UserID varchar(45))
BEGIN
insert into `Following` (Host, Artist)
values (UserID, Artist);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Buy_Ticket
-- -----------------------------------------------------

DELIMITER $$
USE `J3DK`$$
CREATE PROCEDURE `Buy_Ticket` (ConcertID int, amount int)
BEGIN
update `Concerts`
set Tickets_Available = Tickets_Available - amount
where Concert_ID = ConcertID;

update `Concerts`
set Tickets_Sold = Tickets_Sold + amount
where Concert_ID = ConcertID;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
